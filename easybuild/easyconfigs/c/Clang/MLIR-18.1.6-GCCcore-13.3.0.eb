name = 'MLIR'
easyblock = 'EB_LLVMcomponent'
version = '18.1.6'

homepage = 'https://clang.llvm.org/'
description = """C, C++, Objective-C compiler, based on LLVM.  Does not
 include C++ standard library -- use libstdc++ from GCC."""

# Clang also depends on libstdc++ during runtime, but this dependency is
# already specified as the toolchain.
toolchain = {'name': 'GCCcore', 'version': '13.3.0'}

source_urls = ["https://github.com/llvm/llvm-project/releases/download/llvmorg-%(version)s"]
sources = [
    '%(name)s-%(version)s.src.tar.xz',
    'llvm-%(version)s.src.tar.xz',  # Required for mlir-tblgen tests
    'cmake-%(version)s.src.tar.xz',
]
checksums = [
    # 'ce5e71081d17ce9e86d7cbcfa28c4b04b9300f8fb7e78422b1feb6bc52c3028e'
]

builddependencies = [
    ('CMake', '3.29.3'),
    ('Perl', '5.38.2'),
    # Including Python bindings would require this as a runtime dep
    ('Python', '3.12.3'),
    ('binutils', '2.42'),
]
dependencies = [
    # since Clang is a compiler, binutils is a runtime dependency too
    ('LLVM', '18.1.6'),
    # ('hwloc', '2.9.1'),
    # ('libxml2', '2.11.4'),
    # ('ncurses', '6.4'),
    # ('GMP', '6.2.1'),
    # ('Z3', '4.12.2'),
]

# enabling RTTI makes the flang compiler need to link to libc++ so instead of
#   flang-new -flang-experimental-exec -fopenmp hello_openmp.f90
# you would need
#   flang-new -flang-experimental-exec -fopenmp hello_openmp.f90 -l c++
enable_rtti = False

# assertions = True
# python_bindings = False
# skip_all_tests = True
assertions = False
python_bindings = False
skip_all_tests = False

# Tests failing when calling mlir-pdll-lsp-server with `Option 'debug-counter' registered more than once!`
test_suite_max_failed = 17

moduleclass = 'compiler'
